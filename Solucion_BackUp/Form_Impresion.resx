<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVUAADIiRB3JeSQOgTi4BvmBT
        EeK3/ln+WUQL+E4tAeWo303Bg5Yslk4uAEhVKwAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUi4AHE8uAotRMgHvnrUK/2FO
        A/9OLQH/YVER/7f/Wv9ZQwv/Ti0B/6TbSv9+jCr/Ti0B/04tAfBOLAKKTTMAFAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVUAA00uAHBOLQHzTi0B/1Ex
        Af+etQr/YU4D/04tAf9aRQv/t/9a/2NWE/9QMQP/repR/3d/JP9OLQH/Ti0B/04tAf9OLQHyTiwAcwAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAwABBOLQG9Ti0B/04t
        Af9YPgL/kp8I/561Cv9hTQP/Ti0B/04tAf+axUH/r+9T/6jgTf+u7VL/Vz8J/04tAf9OLQH/Ti0B/1A2
        Af9OLQH/Ti0BtFEoABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMLwAbTi0B1U4t
        Af9OLQH/Ti0B/1ExAf9sYQX/bGAF/1AwAf9OLQH/Ti0B/1EzA/93fyT/f44r/1lDC/9OLQH/Ti0B/04t
        Af9VQAH/YoYD/1lgA/9OLQH/Ty0B000zABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSsADE4t
        Ac5UNwL/Ti4B/04tAf9OLQH/Ti0B/1c/Cf9XPgj/Ti0B/04tAf9OLQH/Ti0B/04tAf9UNwL/Ti4B/04t
        Af9OLQH/Ti0B/1M4Af9fXQD/Uj0B/04tAf9OLQH/Ti0BzUkkAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABOLQGrTi0B/5CdCP9rXwX/Ti0B/04tAf+JojL/tv5a/7b+Wv+Fmy//Ti0B/04tAf9OLQH/Ti0B/5Kf
        CP9qXQX/Ti0B/04tAf9OLQH/Ti0B/04tAf9OLQH/Ti0B/04tAf9OLQH/TiwCoQAAAAAAAAAAAAAAAAAA
        AAAAAAAATS0AUE4tAf9OLQH/k6MJ/29lBf9OLQH/YVUS/7f/Wv9ubBz/cHIf/7f/Wv9fTg//Ti0B/04t
        Af9OLQH/lKUJ/25jBf9OLQH/Ti0B/04tAf9TOQH/YYAD/1ZUAv9OLQH/Ti0B/04tAf9OLQH/TS0AUAAA
        AAAAAAAAAAAAAFUrAAZOLQHhTi0B/04tAf+Town/b2UF/04tAf9wcR7/svVW/04tAf9OLQH/tftY/21r
        G/9OLQH/Ti0B/04tAf+UpQn/bmMF/04tAf9OLQH/Ti0B/1M8Af9lawD/VkoC/04tAf9OLQH/Ti0B/04t
        Af9OLQHcVVUAAwAAAAAAAAAATi4AWE4tAf9OLQH/Ti0B/5OjCf9vZQX/Ti0B/3FxHv+y9Vb/Ti0B/04t
        Af+1+1j/bmwc/04tAf9OLQH/Ti0B/5SlCf9uYwX/Ti0B/04tAf9OLQH/Ti0B/04tAf9OLQH/Ti0B/04t
        Af9OLQH/Ti0B/04tAf9PLgBUAAAAAAAAAABOLQHBTi0B/04tAf9OLQH/k6MJ/29lBf9OLQH/cHEe/7L2
        Vv9OLQH/Ti0B/7X8Wf9taxv/Ti0B/04tAf9OLQH/lKUJ/25jBf9OLQH/Ti0B/04tAf9TPAH/X4ME/1dT
        Av9OLQH/Ti0B/04tAf9OLQH/Ti0B/04tAcAAAAAAVTMAD04tAfxOLQH/Ti0B/2lbBP+Yqwn/b2UF/04t
        Af9fUBD/tv5a/3Z8I/94giX/t/1Z/1xJDf9OLQH/Ti0B/2pbBP+Zqwn/bmMF/04tAf9OLQH/Ti0B/19b
        AP9hkAX/YIoF/04tAf9OLQH/Ti0B/04tAf9OLQH/Ti0B+0kkAA5OLABLTi0B/04tAf9QMQH/jpsI/5Ki
        Cf9iTwP/Ti0B/04tAf+Akiz/tfpY/7T5WP9+jSr/Ti0B/04tAf9RMQH/j5sI/5KiCf9hTQP/Ti0B/04t
        Af9OLQH/VUEB/2BhAP9XSQH/Ti0B/04tAf9OLQH/Ti0B/04tAf9OLQH/TiwAS00uAHpOLQH/Ti0B/04t
        Af9OLQH/Ti0B/04tAf9OLQH/Ti0B/04tAf9RMwP/UDID/04tAf9OLQH/Ti0B/04tAf9OLQH/Ti0B/04t
        Af9OLQH/Ti0B/04tAf9OLQH/Ti0B/04tAf9OLQH/Ti0B/04tAf9OLQH/Ti0B/04tAf9OLgB1TS0Cjk4t
        Af9OLQH/XEgN/5CxOP+YwD//bGga/04tAf9OLQH/Ti0B/08uAf95dQX/UzcC/04tAf9OLQH/XEkN/5Gy
        Of+Xvz7/a2ca/04tAf9OLQH/Ti0B/04tAf93cgX/VTkC/04tAf9OLQH/Ti0B/2xfBf9hTQP/Ti0B/04s
        AopOLQKgTi0B/04vAv+n30z/n9BG/5CyOf+1/Fn/YFAQ/04tAf9OLQH/UTEB/561Cv9hTgP/Ti0B/08v
        Av+o4U3/n85F/5K0Ov+1+1j/Xk8P/04tAf9OLQH/Ti0B/520Cv9lUwT/Ti0B/04tAf9OLQH/iJEH/3l2
        Bf9OLQH/Ti0CoE0sAptOLQH/XEgN/7f/Wv9eTQ//Ti0B/6jgTf97iCj/Ti0B/04tAf9RMQH/nrUK/2FO
        A/9OLQH/XksO/7f/Wv9cSg3/Ti0B/6niTv96hSf/Ti0B/04tAf9OLQH/nbQK/2VTBP9OLQH/Ti0B/04t
        Af+IkQf/eXYF/04tAf9NLQKYTS0Ch04tAf9fTg//t/9a/1tHDP9OLQH/o9hJ/3+OK/9OLQH/Ti0B/1Ex
        Af+etQr/YU4D/04tAf9hURH/t/9a/1lDC/9OLQH/pNtK/36MKv9OLQH/Ti0B/04tAf+dtAr/ZVME/04t
        Af9OLQH/Ti0B/4iRB/95dgX/Ti0B/08sAoVNLQBgTi0B/19OD/+3/1r/W0cM/04tAf+j2En/f44r/04t
        Af9OLQH/UTEB/561Cv9hTgP/Ti0B/2FREf+3/1r/WUML/04tAf+k20r/fowq/04tAf9OLQH/Ti0B/520
        Cv9lUwT/Ti0B/04tAf9OLQH/iJEH/3l2Bf9OLQH/TiwAXE0tAChOLQH/WEEJ/7f/Wv9lWxX/UDED/6zq
        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
        AAfwAAAP+AAAH/wAAD//AAB//4AB///IH/8=
</value>
  </data>
</root>